一、框架介绍
  主要依托unittest框架，分为5个部分：
    1.测试用例
    2.测试固件
    3.测试套件
    4.运行测试
    5.测试报告

1.测试用例
格式： 
  import unittest
  class leiming(unittest.TestCase):
    测试用例1
    测试用例2
    测试用例3
    
示例代码：

import requests
import unittest
class logintest(unittest.TesCase):
  def test_login(self):
    url = "http://www.baidu.com/login"
    data = {
        "username":"admin",
        "password":"123456"
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"登录成功")
  def test_login2(self):
    url = "http://www.baidu.com/login"
    data = {
        "username":" ",
        "password":"123456"
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"账号名不能为空")
  def test_login2(self):
    url = "http://www.baidu.com/login"
    data = {
        "username":"admin",
        "password":" "
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"密码不能为空")    


2.测试固件
格式：
import requests
import unittest
class logintest(unittest.TesCase):
  #setUp初始化函数，将u进行定然，方便后面用例调用
  def setUp(self):
      url = "http://www.baidu.com/login"

  def test_login(self):
    data = {
        "username":"admin",
        "password":"123456"
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"登录成功")
    #测试用例
    #...
    
3.测试套件
格式：
方法一：
def suite():
    loginTestCase = unittest.TestSuite()
    loginTestCase.addTest(logintest("testlogin"))
    loginTestCase.addTest(logintest("testlogin2"))
    return loginTestCase
方法二：
def suite()
  loginTestCase = unittest.makeSuite(logintest,"test")
  return loginTestCase
  
代码示例：  

import requests
import unittest
class logintest(unittest.TesCase):
   def setUp(self):
      url = "http://www.baidu.com/login"

  def test_login(self):
    data = {
        "username":"admin",
        "password":"123456"
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"登录成功")
    
    #构建套件
    #主要使用suite()函数
    #方法一：
  def suite():
    loginTestCase = unittest.TestSuite()
    loginTestCase.addTest(logintest("testlogin"))
    loginTestCase.addTest(logintest("testlogin2"))
    return loginTestCase
    
    #或者可以用makeSuite方法进行批量执行test用例
    #方法二：
  def suite()
  loginTestCase = unittest.makeSuite(logintest,"test")
  return loginTestCase
  
4.运行测试
格式：
方法一(优选)：
if __name__=="__main__":
  runner = unittest.TextTestRunner()
  runner.run(suite())
    
方法二：
if __name__=="__main__":
  unittest.main()
  
代码示例： 
import requests
import unittest
class logintest(unittest.TesCase):
   def setUp(self):
      url = "http://www.baidu.com/login"

  def test_login(self):
    data = {
        "username":"admin",
        "password":"123456"
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"登录成功")
    
    #构建套件
    #主要使用suite()函数
    #方法一：
  def suite():
    loginTestCase = unittest.TestSuite()
    loginTestCase.addTest(logintest("testlogin"))
    loginTestCase.addTest(logintest("testlogin2"))
    return loginTestCase
    
    #或者可以用makeSuite方法进行批量执行test用例
    #方法二：
  def suite()
  loginTestCase = unittest.makeSuite(logintest,"test")
  return loginTestCase
  
  #使用方法一
if __name__=="__main__":
  runner = unittest.TextTestRunner()
  runner.run(suite())

5.测试报告
格式：
import requests
import unittest
import HTMLTestRunner

if __name__=="__main__":
  fr = open("baogaomingcheng.html","wb")
  runner = HTMLTestRunner.HTMLTeseRunner(stream=fr,title=""测试报告"
                                        ,descript = "测试详情")
  runner.run(suite()
  )

代码示例：
import requests
import unittest
import HTMLTestRunner

class logintest(unittest.TesCase):
   def setUp(self):
      url = "http://www.baidu.com/login"

  def test_login(self):
    data = {
        "username":"admin",
        "password":"123456"
        }
    r = requests.post(url=u,data=data)
    self.assertEqual(r.text,"登录成功")
    
    #构建套件
    #主要使用suite()函数
    #方法一：
  def suite():
    loginTestCase = unittest.TestSuite()
    loginTestCase.addTest(logintest("testlogin"))
    loginTestCase.addTest(logintest("testlogin2"))
    return loginTestCase
    
    #或者可以用makeSuite方法进行批量执行test用例
    #方法二：
  def suite()
  loginTestCase = unittest.makeSuite(logintest,"test")
  return loginTestCase
  
  #使用方法一生成报告

if __name__=="__main__":
  fr = open("baogaomingcheng.html","wb")
  runner = HTMLTestRunner.HTMLTeseRunner(stream=fr,title=""测试报告"
                                        ,descript = "测试详情")
  runner.run(suite()
  )







































